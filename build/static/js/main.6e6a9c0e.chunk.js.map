{"version":3,"sources":["reportWebVitals.js","components/Header/Header.jsx","components/Display/Display.jsx","components/List/List.jsx","components/Footer/Footer.jsx","components/App/App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","searchValue","Header","props","useState","citylist","changeList","debouncedSave","useCallback","debounce","fetch","response","ok","json","Error","data","citiesData","rightValue","replace","filteredCities","filter","item","regex","RegExp","name","match","className","onBlur","e","searchbox","document","getElementById","relatedTarget","id","preventDefault","classList","remove","add","onKeyUp","target","value","onKeyDown","enterClick","placeholder","tabIndex","map","index","onClick","cityItemClick","country","showWeather","globalChangeTempCels","globalTempConvert","globalChangeTempFahr","Display","this","cards","length","loaded","error","updateDisplayCard","cityName","currentDate","currentTime","weatherDesc","alt","src","iconLink","convertToCels","tempConvert","convertToFahr","temperature","feelsLikeTemp","humidity","windSpeed","React","Component","List","myref","createRef","state","settings","showSettings","bind","setState","onChange","getTimeUpdate","type","htmlFor","onDragEnd","handleOnDragEnd","droppableId","provided","ref","innerRef","droppableProps","TransitionGroup","CSSTransition","timeout","classNames","draggableId","draggableProps","dragHandleProps","key","deleteCard","moreInfo","Footer","href","rel","APIKEY","App","city","date","time","icon","description","wind","isLoaded","weatherCards","checkedBtnId","fetchData","fetchDataEnter","moreInfoRequest","deleteCards","updateCards","getUpdateTime","startInterval","newInterval","updateDisplay","globalChangeToCels","globalChangeToFahr","localStorage","getItem","storage","JSON","parse","storagetime","querySelectorAll","forEach","defaultChecked","intervalTime","interval","setInterval","currCard","Date","timeNow","getHours","getMinutes","Math","round","main","temp","weather","setItem","stringify","input","querySelector","blur","extraCard","pop","iconId","currentIcon","—ÅityTime","getTime","getTimezoneOffset","timezone","newDate","Intl","DateTimeFormat","month","day","format","tempToWeatherCards","cardId","String","speed","feels_like","catch","keyCode","currentData","card","afterDelCards","indexOf","preventCardIndex","preventCard","chosenCardIndex","nextCardIndex","nextCard","clearInterval","celcius","feelslike","fahrenheit","currItem","result","destination","items","Array","from","splice","source","reorderedItem","updateCard","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e6a9c0e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useCallback } from \"react\";\nimport debounce from \"lodash.debounce\";\n\nimport \"../../styles/Header.css\";\n\nlet searchValue = \"\";\nfunction Header (props) {\n    const [citylist, changeList] = useState(\"\")\n    const debouncedSave = useCallback(\n        debounce(() => {\n        if(searchValue !== \"\") {\n           fetch(\"https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json\")\n           .then(response => {\n                if (response.ok) {\n                return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then((data) => {\n                let citiesData = data;\n                let rightValue = searchValue.replace(/[^a-zA-Z0-9–ê-–Ø–∞-—è\\s]/g, \"\");\n                let filteredCities = citiesData.filter(item => {\n                    let regex = new RegExp(`^${rightValue}`, \"gi\");\n                    return item.name.match(regex)\n                });\n                changeList(filteredCities)\n            })\n        }\n        else {\n            changeList(\"\")\n        }}, 250)\n    \n    );\n    \n    const handleKeyUp = (e) => {\n        searchValue = e.target.value;\n        let searchbox = document.getElementById(\"search-list\");\n        if(e.target.value !== \"\") {\n            searchbox.classList.remove(\"cities-list-before\");\n            searchbox.classList.add(\"cities-list-after\");\n        }\n        else {\n            searchbox.classList.remove(\"cities-list-after\");\n            searchbox.classList.add(\"cities-list-before\");\n        }\n            debouncedSave();\n    };\n\n        \n    const inputBlur = (e) => {\n        let searchbox = document.getElementById(\"search-list\");\n        if (!e.relatedTarget) {\n            searchbox.classList.remove(\"cities-list-after\");\n            searchbox.classList.add(\"cities-list-before\");\n        }\n        else if(e.relatedTarget && e.relatedTarget.id === \"search-list\" || e.relatedTarget.className === \"search-item\") {\n            e.preventDefault();\n        }\n        else {\n            searchbox.classList.remove(\"cities-list-after\");\n            searchbox.classList.add(\"cities-list-before\");\n        }\n    }\n        return (\n            <header className={\"header\"}>\n                <h1 className=\"page-name\">MyWeather</h1>\n                <div  className=\"header-main\">\n                    <div className=\"search-block\">\n                        <input onBlur={inputBlur} onKeyUp={handleKeyUp} onKeyDown={props.enterClick} \n                        placeholder=\"Enter city\" className=\"search-input\"></input>\n                        <div tabIndex=\"1\" id=\"search-list\" className=\"cities-list-before\">\n                       {citylist !== \"\" ? citylist.map((item, index) => {\n                           return (\n                               <li tabIndex=\"1\" onClick={() => {props.cityItemClick(item.name)}} key={index} className=\"search-item\">{item.name} ({item.country })</li>\n                           )\n                       }) : \"\"}\n                        </div>\n                    </div>\n                    <button onClick={props.showWeather} className=\"search-btn\">Show weather</button>\n                </div>\n                <div className=\"page-settings\">\n                    <div className=\"cels-fahr-selector\">\n                        <div onClick={props.globalChangeTempCels} className={props.globalTempConvert === false ? \"cels-block\" : \"cels-block-after\"}><span className=\"temp-item\"><sup>o</sup>C</span></div>\n                        <div onClick={props.globalChangeTempFahr} className={props.globalTempConvert === true ? \"fahr-block\" : \"fahr-block-after\"}><span className=\"temp-item\"><sup>o</sup>F</span></div>\n                    </div>\n                </div>\n            </header>\n        )\n};\nexport default Header;\n","import React from 'react';\n\nimport '../../styles/Display.css';\n\nclass Display extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render () {\n        return (\n            <div className={this.props.cards.length > 0 ? 'display' : \"display-none\"}>\n                <div className={this.props.loaded === true ? 'display-before' : 'display-after'}>\n                    <p className='starting-message'>{this.props.error ? 'Please enter correct city name': 'Please enter a city name'}</p> \n                </div>\n                <div className=\"display-wrapper\">\n                    <div className='upd-btn-wrapper'>\n                        <button onClick={this.props.updateDisplayCard} className='update-btn'><i className=\"fas fa-sync-alt\"></i></button>\n                    </div>\n                    <div className='display-main'>\n                        <div className='main'>\n                            <p className='city-name'>{this.props.cityName}</p>\n                            <p className='current-date'>{this.props.currentDate}</p>\n                            <p className='current-time'>{this.props.currentTime}</p>\n                            <p className='weather-desc'>{this.props.weatherDesc}</p>\n                            <img alt='weather icon' className='weather-icon' src={this.props.iconLink}></img>\n                        </div>\n                        <div className='main-temp'>\n                            <div className='temp-block'>\n                                <div className=\"temperature-switch\">\n                                    <button onClick={this.props.convertToCels} className={this.props.tempConvert === false ? 'celcius-switcher' : 'celcius-switcher-after'}><sup>o</sup>C</button>\n                                    <button onClick={this.props.convertToFahr} className={this.props.tempConvert === true ? 'fahrenheit-switcher' : 'fahrenheit-switcher-after'}><sup>o</sup>F</button>\n                                </div>\n                                <span className='temp'>{this.props.temperature}<sup>o</sup></span>\n                                <p className='feelslike-temp-wrapper'>Feels like: \n                                    <span className='feelslike_temp'> {this.props.feelsLikeTemp}<sup>o</sup></span>\n                                </p>\n                            </div>\n                            <div className='temp-block-more'>\n                                <p className='humidity'>Humidity: {this.props.humidity}</p>\n                                <p className='wind-speed'>Wind: {this.props.windSpeed}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};\nexport default Display;\n","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport \"../../styles/List.css\";\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myref = React.createRef();\n        this.state = {\n            settings: false\n        }\n        this.showSettings = this.showSettings.bind(this);\n    };\n    showSettings () {\n        this.state.settings === false ? this.setState({settings: true}) : this.setState({settings: false});\n    }\n    render () {\n        return (\n            <div className={this.props.cards.length > 0 ? \"list\" : \"list-none\"}>\n                <div className=\"list-block\">\n                <div className=\"settings-wrapper\">\n                    <div className=\"settings\">\n                        <h4 className=\"label\">Last seen</h4>\n                        <button onClick={this.showSettings} className=\"update-settigns\"><i className=\"fas fa-cog\"></i></button>\n                    </div>\n                    <div className={this.state.settings === true ? \"settings-block\" : \"settings-block-none\"}>\n                        <h4 className=\"settings-label\">Automatic weather update every: </h4>\n                        <p className=\"radio-text\">\n                            <input onChange={this.props.getTimeUpdate} className=\"radio\" id=\"10min\" type=\"radio\" name=\"updtime\" value=\"10\"></input>\n                            <label htmlFor=\"10min\">10 minutes</label>\n                        </p>\n                        <p className=\"radio-text\">\n                            <input onChange={this.props.getTimeUpdate} className=\"radio\" id=\"30min\" type=\"radio\" name=\"updtime\" value=\"30\"></input>\n                            <label htmlFor=\"30min\">30 minutes</label>\n                        </p>\n                        <p className=\"radio-text\">\n                            <input onChange={this.props.getTimeUpdate} className=\"radio\" id=\"60min\" type=\"radio\" name=\"updtime\" value=\"60\"></input>\n                            <label htmlFor=\"60min\">60 minutes</label>\n                        </p>\n                    </div>\n                </div>\n                <DragDropContext onDragEnd={this.props.handleOnDragEnd}>\n                    <Droppable droppableId=\"cards\">\n                    {(provided) => (\n                        <div ref={provided.innerRef} {...provided.droppableProps} className=\"list-app\">\n                        <TransitionGroup>\n                            {this.props.cards.map((item, index) => {\n                                return (\n                                    <CSSTransition\n                                        timeout={450}\n                                        classNames=\"item\"\n                                        key={index}\n                                    >\n                                    <Draggable draggableId={item[4]} index={index} key={item[4]}>\n                                    {(provided) => (\n                                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} key={item[4]} className=\"list-item\">\n                                        <div className=\"list-item-main\">\n                                            <div className=\"main-listitem-block\">\n                                                <h2 className=\"card-name\">{item[0]}</h2>\n                                                <p className=\"description-weather\">{item[3]}</p>\n                                            </div>\n                                            <div className=\"listitem-description\">\n                                                <p className=\"card-temp\">{item[1]}<sup>o</sup></p>\n                                                <p className=\"upd-info\">Last update: {item[2]}</p>\n                                            </div>\n                                            <div className=\"del-btn-block\">\n                                                <button onClick={() => {this.props.deleteCard(item)}} className=\"delete-card\"><i className=\"fas fa-times\"></i></button>\n                                            </div>\n                                        </div>\n                                        <button onClick={() => {this.props.moreInfo(item)}} className=\"more-info\">Details</button>\n                                        {provided.placeholder}\n                                    </div>\n                                    )}\n                                    </Draggable>\n                                    </CSSTransition>\n                                )\n                            })}\n                        </TransitionGroup>\n                        {provided.placeholder}\n                        </div>\n                    )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n            </div>\n        )\n    }\n}\nexport default List;","import React from 'react';\n\nimport '../../styles/Footer.css'\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer-link\">Created by <a href=\"https://github.com/MotyaBolt\" rel=\"noreferrer\" target=\"_blank\" className=\"profile-link\">Matvey Boltach</a></p>\n            <div className=\"icons\">\n                <a className=\"link\" rel=\"noreferrer\" target=\"_blank\" href=\"https://vk.com/lupapupa0505\"><i className=\"fab fa-vk\"></i></a>\n                <a className=\"link\" rel=\"noreferrer\" target=\"_blank\" href=\"https://t.me/matv_money\"><i className=\"fab fa-telegram\"></i></a>\n                <a className=\"link\" rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/MotyaBolt\"><i className=\"fab fa-github\"></i></a>\n                <a className=\"link\" rel=\"noreferrer\" target=\"_blank\" href=\"https://codepen.io/motyabolt\"><i className=\"fab fa-codepen\"></i></a>\n                <a className=\"link\" rel=\"noreferrer\" target=\"_blank\" href=\"https://mail.google.com/mail/u/0/#inbox?compose=new\"><i className=\"far fa-envelope\"></i></a>\n            </div>\n        </footer>\n    )\n}\nexport default Footer;","import React from 'react';\nimport Header from '../Header/Header';\nimport Display from '../Display/Display';\nimport List from '../List/List';\nimport Footer from '../Footer/Footer';\nimport '../App/App.css'\n\nconst APIKEY = 'b0e658f81fbdeeaa452333e7e504314a';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      date: '',\n      time: '',\n      icon: '',\n      description: '',\n      temperature: '',\n      feelsLikeTemp: '',\n      humidity: '',\n      wind: '',\n      isLoaded: false,\n      error: null,\n      weatherCards: [],\n      checkedBtnId: '',\n      tempConvert: false, \n      globalTempConvert: false\n    }\n    // initialize our functions\n    this.fetchData = this.fetchData.bind(this);\n    this.fetchDataEnter = this.fetchDataEnter.bind(this);\n    this.moreInfoRequest = this.moreInfoRequest.bind(this);\n    this.deleteCards = this.deleteCards.bind(this);\n    this.updateCards = this.updateCards.bind(this);\n    this.getUpdateTime = this.getUpdateTime.bind(this);\n    this.startInterval = this.startInterval.bind(this);\n    this.newInterval = this.newInterval.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.convertToCels = this.convertToCels.bind(this);\n    this.convertToFahr = this.convertToFahr.bind(this);\n    this.cityItemClick = this.cityItemClick.bind(this);\n    this.globalChangeToCels = this.globalChangeToCels.bind(this);\n    this.globalChangeToFahr = this.globalChangeToFahr.bind(this);\n    this.handleOnDragEnd = this.handleOnDragEnd.bind(this);\n  };\n  // fucntion to get localStorage data\n  componentDidMount () {\n    if(localStorage.getItem('card') !== null) {\n      let storage = JSON.parse(localStorage.getItem('card'));\n        this.setState({\n          isLoaded: storage.isLoaded,\n          city: storage.city,\n          date: storage.date,\n          time: storage.time,\n          temperature: storage.temperature,\n          feelsLikeTemp: storage.feelsLikeTemp,\n          description: storage.description,\n          humidity: storage.humidity,\n          wind: storage.wind,\n          icon: storage.icon,\n          weatherCards: storage.weatherCards,\n          tempConvert: storage.tempConvert,\n          globalTempConvert: storage.globalTempConvert\n        }, () => {\n          this.startInterval();\n        })\n      }\n      else {\n        this.startInterval();\n      }\n  };\n  // start update interval\n  startInterval () {\n    if(localStorage.getItem('updatetime') !== null) {\n      let storagetime = localStorage.getItem('updatetime');\n      let radioButtons = document.querySelectorAll('.radio');\n      radioButtons.forEach(item => {\n        item.defaultChecked = false\n        if(item.value === storagetime) {\n          item.defaultChecked = true\n        }\n      });\n      intervalTime = storagetime * 60000;\n      this.updateCards();\n      interval = setInterval(this.updateCards, intervalTime);\n    }\n    else  {\n      let radioButtons = document.querySelectorAll('.radio');\n      radioButtons.forEach(item => {\n        if(item.value === '10') {\n          item.defaultChecked = true\n          intervalTime = item.value * 60000;\n        }\n    })\n      this.updateCards();\n      interval = setInterval(this.updateCards, intervalTime);\n    };\n  };\n  // function to update weather cards in sidebar\n  updateCards () {\n    if(this.state.weatherCards.length > 0) {\n      this.state.weatherCards.map(currCard => {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${currCard[0]}&appid=${APIKEY}`)\n        .then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n              throw new Error('Something went wrong ...');\n          }\n        })\n        .then(\n          (data) => {\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0' + date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            if(this.state.globalTempConvert === true) {\n              currCard[1] = Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32);    \n            } else {\n              currCard[1] = Math.round(data.main.temp - 273.15)\n            }\n            currCard[2] = timeNow;\n            currCard[3] = data.weather[0].description;\n          });\n        });\n        localStorage.setItem(\"card\", JSON.stringify(this.state));\n        this.updateDisplay();\n    }\n  };\n  // function to make ajax request on click button \"show weather\"\n  fetchData () {\n    let input = document.querySelector('.search-input');\n    input.blur();\n    if(input.value !== '') {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${input.value}&appid=${APIKEY}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            throw new Error('Something went wrong ...');\n        }\n      })\n      .then(\n        (data) => {\n          let extraCard = '';\n          this.state.weatherCards.map(item => {\n              extraCard = this.state.weatherCards.filter(item => item[0] === data.name);\n          })\n          if (input.value !== '' && extraCard.length < 1) {\n            if (this.state.weatherCards.length > 2) {this.state.weatherCards.pop()}\n            let iconId = data.weather[0].icon;\n            let currentIcon = `http://openweathermap.org/img/wn/${iconId}.png`\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0'+ date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            let localTime = date.getTime();\n            let localOffset = date.getTimezoneOffset() * 60000;\n            let utc = localTime + localOffset;\n            let —ÅityTime = utc + (1000 * data.timezone);\n            let newDate = new Date(—ÅityTime);\n            let currentTime = 0;\n            newDate.getHours() < 10 ? currentTime = '0' + newDate.getHours() + ':' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            newDate.getMinutes() < 10 ? currentTime = newDate.getHours() + ':' + '0' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            let options = { month: 'long', day: 'numeric'};\n            let currentDate = new Intl.DateTimeFormat('en-US', options).format(newDate);\n            let tempToWeatherCards = null;\n            this.state.globalTempConvert === true ? tempToWeatherCards =  Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32)   \n            : tempToWeatherCards = Math.round(data.main.temp - 273.15);\n            let cardId = '';\n            cardId = String(data.id)\n            this.setState({\n              isLoaded: true,\n              city: data.name,\n              date: currentDate,\n              time: currentTime,\n              description: data.weather[0].description,\n              humidity: data.main.humidity + '%',\n              wind: data.wind.speed + ' m/s',\n              icon: currentIcon,\n              weatherCards: [[data.name, tempToWeatherCards, timeNow, data.weather[0].description, cardId], ...this.state.weatherCards]\n            });\n            if(this.state.globalTempConvert === true) {\n              this.setState({\n                temperature: Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32),\n                feelsLikeTemp: Math.round((Math.round(data.main.feels_like - 273.15) * 1.8) + 32)    \n              });\n            }\n            else {\n              this.setState({\n                temperature: Math.round(data.main.temp - 273.15),\n                feelsLikeTemp: Math.round(data.main.feels_like - 273.15)\n              })\n            }\n            input.value = '';\n            let searchbox = document.getElementById('search-list');\n            searchbox.classList.remove('cities-list-after');\n            searchbox.classList.add('cities-list-before');\n            localStorage.setItem(\"card\", JSON.stringify(this.state));\n          } else {\n            input.value = ''\n          }\n        },\n      )\n      .catch((error) => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      })\n    }\n  };\n  // function to make fetchData() on click \"enter\"\n  fetchDataEnter (e) {\n    if(e.keyCode === 13) {\n      this.fetchData();\n    }\n  };\n  // fucntion to make ajax request on click on current weather card\n  moreInfoRequest (currentData) {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${currentData[0]}&appid=${APIKEY}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            throw new Error('Something went wrong ...');\n        }\n      })\n      .then(\n        (data) => {\n            let iconId = data.weather[0].icon;\n            let currentIcon = `http://openweathermap.org/img/wn/${iconId}.png`\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0' + date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            this.state.weatherCards.map((item) => {\n              if (item === currentData) {\n                item[3] = data.weather[0].description\n                item[2] = timeNow;\n                if(this.state.globalTempConvert === true) {\n                  item[1] = Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32);   \n                } else {\n                  item[1] = Math.round(data.main.temp - 273.15)\n                }\n              }\n            });\n            let localTime = date.getTime();\n            let localOffset = date.getTimezoneOffset() * 60000;\n            let utc = localTime + localOffset;\n            let —ÅityTime = utc + (1000 * data.timezone);\n            let newDate = new Date(—ÅityTime);\n            let currentTime = 0;\n            newDate.getHours() < 10 ? currentTime = '0' + newDate.getHours() + ':' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            newDate.getMinutes() < 10 ? currentTime = newDate.getHours() + ':' + '0' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            let options = { month: 'long', day: 'numeric'};\n            let currentDate = new Intl.DateTimeFormat('en-US', options).format(newDate);\n            this.setState({\n              isLoaded: true,\n              city: data.name,\n              date: currentDate,\n              time: currentTime,\n              description: data.weather[0].description,\n              humidity: data.main.humidity + '%',\n              wind: data.wind.speed + ' m/s',\n              icon: currentIcon,\n              weatherCards: this.state.weatherCards\n            });\n            if(this.state.globalTempConvert === true) {\n              if(this.state.tempConvert === false) {\n                this.setState({\n                  tempConvert: true\n                })\n              }\n              this.setState({\n                temperature: Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32),\n                feelsLikeTemp: Math.round((Math.round(data.main.feels_like - 273.15) * 1.8) + 32)    \n              });\n            }\n            else {\n              if(this.state.tempConvert === true) {\n                this.setState({\n                  tempConvert: false\n                })\n              }\n              this.setState({\n                temperature: Math.round(data.main.temp - 273.15),\n                feelsLikeTemp: Math.round(data.main.feels_like - 273.15)\n              })\n            }\n            localStorage.setItem(\"card\", JSON.stringify(this.state));\n        },\n      )\n      .catch((error) => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      })\n  };\n  // function to delete current card\n  deleteCards (card) {\n    let afterDelCards = this.state.weatherCards.filter(item => item !== card)\n    if(this.state.weatherCards.indexOf(card) === 2 || this.state.weatherCards.indexOf(card) === 1) {\n      let preventCardIndex = this.state.weatherCards.indexOf(card) - 1;\n      let preventCard = this.state.weatherCards[preventCardIndex];\n      let chosenCardIndex = null;\n      this.state.weatherCards.map(item => {\n        if(this.state.city === item[0]) {\n          chosenCardIndex = this.state.weatherCards.indexOf(item)\n        }\n      });\n      if (chosenCardIndex !== 0) {\n        this.setState({city: preventCard[0]},\n          () => {\n            this.updateDisplay();\n          })\n      }\n    }\n    else {\n      if (this.state.weatherCards.length > 1) {\n          let nextCardIndex = this.state.weatherCards.indexOf(card) + 1;\n          let nextCard = this.state.weatherCards[nextCardIndex];\n          let chosenCardIndex = null;\n          this.state.weatherCards.map(item => {\n            if(this.state.city === item[0]) {\n              chosenCardIndex = this.state.weatherCards.indexOf(item)\n            }\n          });\n          if (chosenCardIndex !== 2) {\n            this.setState({city: nextCard[0]},\n            () => {\n              this.updateDisplay();\n            })\n          }\n      }\n      else {\n        this.setState({isLoaded: false, error: false});\n      };\n    };\n    this.setState({weatherCards: afterDelCards}, \n    () => {\n      localStorage.setItem(\"card\", JSON.stringify(this.state))\n    });\n  };\n  // function to get time of automatically updating weather cards\n  getUpdateTime (e) {\n    this.setState({\n      checkedBtnId: e.target.value}, \n      () => {localStorage.setItem(\"updatetime\", this.state.checkedBtnId)\n    });\n    if(this.state.weatherCards.length > 0) {\n      this.updateCards();\n      clearInterval(interval);\n      interval = '';\n      intervalTime = e.target.value * 60000;\n      this.newInterval()\n    };\n  };\n  // function to start new interval when we click on radio button(10min, 30min, 60min)\n  newInterval () {\n    interval = setInterval(this.updateCards, intervalTime)\n  };\n  // function to update display card on click \"update button\", making ajax request\n  updateDisplay () {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${APIKEY}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            throw new Error('Something went wrong ...');\n        }\n      })\n      .then(\n        (data) => {\n            let iconId = data.weather[0].icon;\n            let currentIcon = `http://openweathermap.org/img/wn/${iconId}.png`\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0' + date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            this.state.weatherCards.map((item) => {\n              if (item[0] === this.state.city) {\n                item[3] = data.weather[0].description\n                item[2] = timeNow;\n                if(this.state.globalTempConvert === true) {\n                  item[1] = Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32);   \n                } else {\n                  item[1] = Math.round(data.main.temp - 273.15)\n                }\n              }\n            });\n            let localTime = date.getTime();\n            let localOffset = date.getTimezoneOffset() * 60000;\n            let utc = localTime + localOffset;\n            let —ÅityTime = utc + (1000 * data.timezone);\n            let newDate = new Date(—ÅityTime);\n            let currentTime = 0;\n            newDate.getHours() < 10 ? currentTime = '0' + newDate.getHours() + ':' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            newDate.getMinutes() < 10 ? currentTime = newDate.getHours() + ':' + '0' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            let options = { month: 'long', day: 'numeric'};\n            let currentDate = new Intl.DateTimeFormat('en-US', options).format(newDate);\n            this.setState({\n              isLoaded: true,\n              city: data.name,\n              date: currentDate,\n              time: currentTime,\n              description: data.weather[0].description,\n              humidity: data.main.humidity + '%',\n              wind: data.wind.speed + ' m/s',\n              icon: currentIcon,\n              weatherCards: this.state.weatherCards,\n            });\n            if(this.state.globalTempConvert === true) {\n              if(this.state.tempConvert === false) {\n                this.setState({\n                  tempConvert: true\n                })\n              }\n               this.setState({\n                temperature: Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32),\n                feelsLikeTemp: Math.round((Math.round(data.main.feels_like - 273.15) * 1.8) + 32)    \n              });\n            }\n            else {\n              if(this.state.tempConvert === true) {\n                this.setState({\n                  tempConvert: false\n                })\n              }\n              this.setState({\n                temperature: Math.round(data.main.temp - 273.15),\n                feelsLikeTemp: Math.round(data.main.feels_like - 273.15)\n              })\n            }\n            localStorage.setItem(\"card\", JSON.stringify(this.state))\n        },\n      )\n      .catch((error) => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      })\n  };\n  // function to convert temperature from celcius to fahrenheit\n  convertToCels (e) {\n    if(this.state.tempConvert === true) {\n      let celcius = Math.round((this.state.temperature - 32) / 1.8);\n      let feelslike = Math.round((this.state.feelsLikeTemp - 32) / 1.8);\n      this.setState({tempConvert: false, temperature: celcius, feelsLikeTemp: feelslike}, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n    }\n  }\n  // function to convert temperature from fahrenheit to celcius\n  convertToFahr (e) {\n    if(this.state.tempConvert === false) {\n      let fahrenheit = Math.round((this.state.temperature * 1.8) + 32);\n      let feelslike = Math.round((this.state.feelsLikeTemp * 1.8) + 32);\n      this.setState({tempConvert: true, temperature: fahrenheit, feelsLikeTemp: feelslike}, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n    }\n  }\n  // click handler in list of cities in Heade.jsx, input, dropdown list\n  cityItemClick (currItem) {\n    let input = document.querySelector('.search-input');\n    input.value = currItem;\n    this.fetchData();\n    let searchbox = document.getElementById('search-list');\n    searchbox.classList.remove('cities-list-after');\n    searchbox.classList.add('cities-list-before');\n  };\n  // global change to celcius\n  globalChangeToCels () {\n    if(this.state.globalTempConvert === true) {\n      this.state.weatherCards.map(item => {\n        item[1] = Math.round((item[1] - 32) / 1.8)\n      })\n      this.setState({\n        globalTempConvert: false\n      }, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      if(this.state.tempConvert === true) {\n        let celcius = Math.round((this.state.temperature - 32) / 1.8);\n        let feelslike = Math.round((this.state.feelsLikeTemp - 32) / 1.8);\n        this.setState({\n          globalTempConvert: false,\n          tempConvert: false,\n          temperature: celcius, \n          feelsLikeTemp: feelslike\n        }, () => \n        {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      }\n    }\n  };\n  // global change to fahrenheit\n  globalChangeToFahr () {\n    if(this.state.globalTempConvert === false) {\n      this.setState({\n        globalTempConvert: true\n      }, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      this.state.weatherCards.map(item => {\n        item[1] = Math.round((item[1] * 1.8) + 32)\n      })\n      if(this.state.tempConvert !== true) {\n        let fahrenheit = Math.round((this.state.temperature * 1.8) + 32);\n        let feelslike = Math.round((this.state.feelsLikeTemp * 1.8) + 32);\n        this.setState({\n          globalTempConvert: true,\n          temperature: fahrenheit, \n          tempConvert: true,\n          feelsLikeTemp: feelslike\n        }, () => \n        {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      }\n    }\n  };\n  // drag and drop cards \n  handleOnDragEnd (result) {\n    if (!result.destination) return;\n    const items = Array.from(this.state.weatherCards);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    this.setState ({\n      weatherCards: items\n    }, () => {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n  };\n\n  render () {\n    return (\n      <div className='app'>\n          <Header \n            globalTempConvert={this.state.globalTempConvert}\n            globalChangeTempCels={this.globalChangeToCels}\n            globalChangeTempFahr={this.globalChangeToFahr}\n            cityItemClick={this.cityItemClick}\n            enterClick={this.fetchDataEnter} \n            showWeather={this.fetchData}\n          />\n          <div className='weather-info'>\n            <List\n              handleOnDragEnd={this.handleOnDragEnd}\n              deleteCard={this.deleteCards} \n              moreInfo={this.moreInfoRequest} \n              cards={this.state.weatherCards}\n              updateCard={this.updateCards}\n              getTimeUpdate={this.getUpdateTime}\n            />\n            <Display \n              cards={this.state.weatherCards}\n              tempConvert={this.state.tempConvert}\n              convertToCels={this.convertToCels}\n              convertToFahr={this.convertToFahr}\n              updateDisplayCard={this.updateDisplay}\n              loaded={this.state.isLoaded} \n              error={this.state.error} \n              cityName={this.state.city} \n              currentTime={this.state.time} \n              currentDate={this.state.date} \n              weatherDesc={this.state.description} \n              iconLink={this.state.icon} \n              temperature={this.state.temperature} \n              feelsLikeTemp={this.state.feelsLikeTemp} \n              humidity={this.state.humidity} \n              windSpeed={this.state.wind}\n            />\n          </div>\n          <Footer/>\n      </div>\n    )\n  };\n};\nexport default App;\nlet intervalTime = '';\nlet interval = '';\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './components/App/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}