[{"/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/index.js":"1","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/App.jsx":"2","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/reportWebVitals.js":"3","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/Header.jsx":"4","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/Display.jsx":"5","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/List.jsx":"6","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/Footer.jsx":"7"},{"size":482,"mtime":1612640849076,"results":"8","hashOfConfig":"9"},{"size":23424,"mtime":1612646540884,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611082523384,"results":"11","hashOfConfig":"9"},{"size":3800,"mtime":1612639338806,"results":"12","hashOfConfig":"9"},{"size":2781,"mtime":1612550726162,"results":"13","hashOfConfig":"9"},{"size":4990,"mtime":1612641945241,"results":"14","hashOfConfig":"9"},{"size":1134,"mtime":1612688005763,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"uvaauy",{"filePath":"19","messages":"20","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/index.js",[],["34","35"],"/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/App.jsx",["36","37","38","39","40","41","42","43","44","45","46","47","48","49"],"import React from 'react';\nimport Header from './components/Header';\nimport Display from './components/Display';\nimport List from './components/List';\nimport Footer from './components/Footer';\nimport './App.css'\nconst APIKEY = 'b0e658f81fbdeeaa452333e7e504314a';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      date: '',\n      time: '',\n      icon: '',\n      description: '',\n      temperature: '',\n      feelsLikeTemp: '',\n      humidity: '',\n      wind: '',\n      isLoaded: false,\n      error: null,\n      weatherCards: [],\n      checkedBtnId: '',\n      tempConvert: false, \n      globalTempConvert: false\n    }\n    // initialize our functions\n    this.fetchData = this.fetchData.bind(this);\n    this.fetchDataEnter = this.fetchDataEnter.bind(this);\n    this.moreInfoRequest = this.moreInfoRequest.bind(this);\n    this.deleteCards = this.deleteCards.bind(this);\n    this.updateCards = this.updateCards.bind(this);\n    this.getUpdateTime = this.getUpdateTime.bind(this);\n    this.startInterval = this.startInterval.bind(this);\n    this.newInterval = this.newInterval.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.convertToCels = this.convertToCels.bind(this);\n    this.convertToFahr = this.convertToFahr.bind(this);\n    this.cityItemClick = this.cityItemClick.bind(this);\n    this.globalChangeToCels = this.globalChangeToCels.bind(this);\n    this.globalChangeToFahr = this.globalChangeToFahr.bind(this);\n    this.handleOnDragEnd = this.handleOnDragEnd.bind(this);\n  };\n  // fucntion to get localStorage data\n  componentDidMount () {\n    if(localStorage.getItem('card') !== null) {\n      let storage = JSON.parse(localStorage.getItem('card'));\n        this.setState({\n          isLoaded: storage.isLoaded,\n          city: storage.city,\n          date: storage.date,\n          time: storage.time,\n          temperature: storage.temperature,\n          feelsLikeTemp: storage.feelsLikeTemp,\n          description: storage.description,\n          humidity: storage.humidity,\n          wind: storage.wind,\n          icon: storage.icon,\n          weatherCards: storage.weatherCards,\n          tempConvert: storage.tempConvert,\n          globalTempConvert: storage.globalTempConvert\n        }, () => {\n          this.startInterval();\n        })\n    } else {\n      this.startInterval();\n    }\n  };\n  // start update interval\n  startInterval () {\n    if(localStorage.getItem('updatetime') !== null) {\n      let storagetime = localStorage.getItem('updatetime');\n      let radioButtons = document.querySelectorAll('.radio');\n      radioButtons.forEach(item => {\n        item.defaultChecked = false\n        if(item.value === storagetime) {\n          item.defaultChecked = true\n        }\n      });\n      intervalTime = storagetime * 60000;\n      this.updateCards();\n      interval = setInterval(this.updateCards, intervalTime);\n    }\n    else  {\n      let radioButtons = document.querySelectorAll('.radio');\n      radioButtons.forEach(item => {\n        if(item.value === '10') {\n          item.defaultChecked = true\n          intervalTime = item.value * 60000;\n        }\n    })\n      this.updateCards();\n      interval = setInterval(this.updateCards, intervalTime);\n    };\n  };\n   \n  // function to update weather cards in sidebar\n  updateCards () {\n    if(this.state.weatherCards.length > 0) {\n      this.state.weatherCards.map(currCard => {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${currCard[0]}&appid=${APIKEY}`)\n        .then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n              throw new Error('Something went wrong ...');\n          }\n        })\n        .then(\n          (data) => {\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0' + date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            if(this.state.globalTempConvert === true) {\n              currCard[1] = Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32);    \n            } else {\n              currCard[1] = Math.round(data.main.temp - 273.15)\n            }\n            currCard[2] = timeNow;\n            currCard[3] = data.weather[0].description;\n          });\n        });\n        localStorage.setItem(\"card\", JSON.stringify(this.state));\n        this.updateDisplay();\n    }\n  };\n  // function to make ajax request on click button \"show weather\"\n  fetchData () {\n    let input = document.querySelector('.search-input');\n    input.blur();\n    if(input.value !== '') {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${input.value}&appid=${APIKEY}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            throw new Error('Something went wrong ...');\n        }\n      })\n      .then(\n        (data) => {\n          if (input.value !== '') {\n            if(this.state.weatherCards.length >= 1 && this.state.weatherCards.length < 3) {\n              let newCards = this.state.weatherCards.filter(item => item[0] !== data.name);\n              this.setState({weatherCards: newCards});\n            }\n            else if(this.state.weatherCards.length > 2) {\n              let newCards = this.state.weatherCards.filter(item => item[0] !== data.name);\n              this.setState({weatherCards: newCards});\n              newCards.length !== 2  ? this.state.weatherCards.pop() : console.log('Hello!')\n            }\n            let iconId = data.weather[0].icon;\n            let currentIcon = `http://openweathermap.org/img/wn/${iconId}.png`\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0'+ date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            let localTime = date.getTime();\n            let localOffset = date.getTimezoneOffset() * 60000;\n            let utc = localTime + localOffset;\n            let сityTime = utc + (1000 * data.timezone);\n            let newDate = new Date(сityTime);\n            let currentTime = 0;\n            newDate.getHours() < 10 ? currentTime = '0' + newDate.getHours() + ':' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            newDate.getMinutes() < 10 ? currentTime = newDate.getHours() + ':' + '0' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            let options = { month: 'long', day: 'numeric'};\n            let currentDate = new Intl.DateTimeFormat('en-US', options).format(newDate);\n            let tempToWeatherCards = null;\n            this.state.globalTempConvert === true ? tempToWeatherCards =  Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32)   \n            : tempToWeatherCards = Math.round(data.main.temp - 273.15);\n            let cardId = '';\n            cardId = String(data.id)\n            this.setState({\n              isLoaded: true,\n              city: data.name,\n              date: currentDate,\n              time: currentTime,\n              description: data.weather[0].description,\n              humidity: data.main.humidity + '%',\n              wind: data.wind.speed + ' m/s',\n              icon: currentIcon,\n              weatherCards: [[data.name, tempToWeatherCards, timeNow, data.weather[0].description, cardId], ...this.state.weatherCards]\n            });\n            if(this.state.globalTempConvert === true) {\n              this.setState({\n                temperature: Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32),\n                feelsLikeTemp: Math.round((Math.round(data.main.feels_like - 273.15) * 1.8) + 32)    \n              });\n            }\n            else {\n              this.setState({\n                temperature: Math.round(data.main.temp - 273.15),\n                feelsLikeTemp: Math.round(data.main.feels_like - 273.15)\n              })\n            }\n            input.value = '';\n            let searchbox = document.getElementById('search-list');\n            searchbox.classList.remove('cities-list-after');\n            searchbox.classList.add('cities-list-before');\n            localStorage.setItem(\"card\", JSON.stringify(this.state))\n          }\n        },\n      )\n      .catch((error) => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      })\n    }\n  };\n  // function to make fetchData() on click \"enter\"\n  fetchDataEnter (e) {\n    if(e.keyCode === 13) {\n      this.fetchData();\n    }\n  };\n  // fucntion to make ajax request on click on current weather card\n  moreInfoRequest (currentData) {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${currentData[0]}&appid=${APIKEY}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            throw new Error('Something went wrong ...');\n        }\n      })\n      .then(\n        (data) => {\n            let iconId = data.weather[0].icon;\n            let currentIcon = `http://openweathermap.org/img/wn/${iconId}.png`\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0' + date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            this.state.weatherCards.map((item) => {\n              if (item === currentData) {\n                item[3] = data.weather[0].description\n                item[2] = timeNow;\n                if(this.state.globalTempConvert === true) {\n                  item[1] = Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32);   \n                } else {\n                  item[1] = Math.round(data.main.temp - 273.15)\n                }\n              }\n            });\n            let localTime = date.getTime();\n            let localOffset = date.getTimezoneOffset() * 60000;\n            let utc = localTime + localOffset;\n            let сityTime = utc + (1000 * data.timezone);\n            let newDate = new Date(сityTime);\n            let currentTime = 0;\n            newDate.getHours() < 10 ? currentTime = '0' + newDate.getHours() + ':' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            newDate.getMinutes() < 10 ? currentTime = newDate.getHours() + ':' + '0' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            let options = { month: 'long', day: 'numeric'};\n            let currentDate = new Intl.DateTimeFormat('en-US', options).format(newDate);\n            this.setState({\n              isLoaded: true,\n              city: data.name,\n              date: currentDate,\n              time: currentTime,\n              description: data.weather[0].description,\n              humidity: data.main.humidity + '%',\n              wind: data.wind.speed + ' m/s',\n              icon: currentIcon,\n              weatherCards: this.state.weatherCards\n            });\n            if(this.state.globalTempConvert === true) {\n              if(this.state.tempConvert === false) {\n                this.setState({\n                  tempConvert: true\n                })\n              }\n              this.setState({\n                temperature: Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32),\n                feelsLikeTemp: Math.round((Math.round(data.main.feels_like - 273.15) * 1.8) + 32)    \n              });\n            }\n            else {\n              if(this.state.tempConvert === true) {\n                this.setState({\n                  tempConvert: false\n                })\n              }\n              this.setState({\n                temperature: Math.round(data.main.temp - 273.15),\n                feelsLikeTemp: Math.round(data.main.feels_like - 273.15)\n              })\n            }\n            localStorage.setItem(\"card\", JSON.stringify(this.state));\n        },\n      )\n      .catch((error) => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      })\n  };\n  // function to delete current card\n  deleteCards (card) {\n    let afterDelCards = this.state.weatherCards.filter(item => item !== card)\n    if(this.state.weatherCards.indexOf(card) === 2 || this.state.weatherCards.indexOf(card) === 1) {\n      let preventCardIndex = this.state.weatherCards.indexOf(card) - 1;\n      let preventCard = this.state.weatherCards[preventCardIndex];\n      let chosenCardIndex = null;\n      this.state.weatherCards.map(item => {\n        if(this.state.city === item[0]) {\n          chosenCardIndex = this.state.weatherCards.indexOf(item)\n        }\n      });\n      if (chosenCardIndex !== 0) {\n        this.setState({city: preventCard[0]},\n          () => {\n            this.updateDisplay();\n          })\n      }\n    }\n    else {\n      if (this.state.weatherCards.length > 1) {\n          let nextCardIndex = this.state.weatherCards.indexOf(card) + 1;\n          let nextCard = this.state.weatherCards[nextCardIndex];\n          let chosenCardIndex = null;\n          this.state.weatherCards.map(item => {\n            if(this.state.city === item[0]) {\n              chosenCardIndex = this.state.weatherCards.indexOf(item)\n            }\n          });\n          if (chosenCardIndex !== 2) {\n            this.setState({city: nextCard[0]},\n            () => {\n              this.updateDisplay();\n            })\n          }\n      }\n      else {\n        this.setState({isLoaded: false, error: false});\n      };\n    };\n    this.setState({weatherCards: afterDelCards}, \n    () => {\n      localStorage.setItem(\"card\", JSON.stringify(this.state))\n    });\n  };\n  // function to get time of automatically updating weather cards\n  getUpdateTime (e) {\n    this.setState({\n      checkedBtnId: e.target.value}, \n      () => {localStorage.setItem(\"updatetime\", this.state.checkedBtnId)\n    });\n    if(this.state.weatherCards.length > 0) {\n      this.updateCards();\n      clearInterval(interval);\n      interval = '';\n      intervalTime = e.target.value * 60000;\n      this.newInterval()\n    };\n  };\n  // function to start new interval when we click on radio button(10min, 30min, 60min)\n  newInterval () {\n    interval = setInterval(this.updateCards, intervalTime)\n  };\n  // function to update display card on click \"update button\", making ajax request\n  updateDisplay () {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${APIKEY}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            throw new Error('Something went wrong ...');\n        }\n      })\n      .then(\n        (data) => {\n            let iconId = data.weather[0].icon;\n            let currentIcon = `http://openweathermap.org/img/wn/${iconId}.png`\n            let date = new Date();\n            let timeNow = 0;\n            date.getHours() < 10 ? timeNow = '0' + date.getHours() + ':' + date.getMinutes()\n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            date.getMinutes() < 10 ? timeNow = date.getHours() + ':' + '0' + date.getMinutes() \n            : timeNow = date.getHours() + ':' + date.getMinutes();\n            this.state.weatherCards.map((item) => {\n              if (item[0] === this.state.city) {\n                item[3] = data.weather[0].description\n                item[2] = timeNow;\n                if(this.state.globalTempConvert === true) {\n                  item[1] = Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32);   \n                } else {\n                  item[1] = Math.round(data.main.temp - 273.15)\n                }\n              }\n            });\n            let localTime = date.getTime();\n            let localOffset = date.getTimezoneOffset() * 60000;\n            let utc = localTime + localOffset;\n            let сityTime = utc + (1000 * data.timezone);\n            let newDate = new Date(сityTime);\n            let currentTime = 0;\n            newDate.getHours() < 10 ? currentTime = '0' + newDate.getHours() + ':' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            newDate.getMinutes() < 10 ? currentTime = newDate.getHours() + ':' + '0' + newDate.getMinutes()\n            : currentTime = newDate.getHours() + ':' + newDate.getMinutes();\n            let options = { month: 'long', day: 'numeric'};\n            let currentDate = new Intl.DateTimeFormat('en-US', options).format(newDate);\n            this.setState({\n              isLoaded: true,\n              city: data.name,\n              date: currentDate,\n              time: currentTime,\n              description: data.weather[0].description,\n              humidity: data.main.humidity + '%',\n              wind: data.wind.speed + ' m/s',\n              icon: currentIcon,\n              weatherCards: this.state.weatherCards,\n            });\n            if(this.state.globalTempConvert === true) {\n              if(this.state.tempConvert === false) {\n                this.setState({\n                  tempConvert: true\n                })\n              }\n               this.setState({\n                temperature: Math.round((Math.round(data.main.temp - 273.15) * 1.8) + 32),\n                feelsLikeTemp: Math.round((Math.round(data.main.feels_like - 273.15) * 1.8) + 32)    \n              });\n            }\n            else {\n              if(this.state.tempConvert === true) {\n                this.setState({\n                  tempConvert: false\n                })\n              }\n              this.setState({\n                temperature: Math.round(data.main.temp - 273.15),\n                feelsLikeTemp: Math.round(data.main.feels_like - 273.15)\n              })\n            }\n            localStorage.setItem(\"card\", JSON.stringify(this.state))\n        },\n      )\n      .catch((error) => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      })\n  };\n  // function to convert temperature from celcius to fahrenheit\n  convertToCels (e) {\n    if(this.state.tempConvert === true) {\n      let celcius = Math.round((this.state.temperature - 32) / 1.8);\n      let feelslike = Math.round((this.state.feelsLikeTemp - 32) / 1.8);\n      this.setState({tempConvert: false, temperature: celcius, feelsLikeTemp: feelslike}, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n    }\n  }\n  // function to convert temperature from fahrenheit to celcius\n  convertToFahr (e) {\n    if(this.state.tempConvert === false) {\n      let fahrenheit = Math.round((this.state.temperature * 1.8) + 32);\n      let feelslike = Math.round((this.state.feelsLikeTemp * 1.8) + 32);\n      this.setState({tempConvert: true, temperature: fahrenheit, feelsLikeTemp: feelslike}, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n    }\n  }\n  // click handler in list of cities in Heade.jsx, input, dropdown list\n  cityItemClick (currItem) {\n    let input = document.querySelector('.search-input');\n    input.value = currItem;\n    this.fetchData();\n    let searchbox = document.getElementById('search-list');\n    searchbox.classList.remove('cities-list-after');\n    searchbox.classList.add('cities-list-before');\n  };\n  // global change to celcius\n  globalChangeToCels () {\n    if(this.state.globalTempConvert === true) {\n      this.state.weatherCards.map(item => {\n        item[1] = Math.round((item[1] - 32) / 1.8)\n      })\n      this.setState({\n        globalTempConvert: false\n      }, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      if(this.state.tempConvert === true) {\n        let celcius = Math.round((this.state.temperature - 32) / 1.8);\n        let feelslike = Math.round((this.state.feelsLikeTemp - 32) / 1.8);\n        this.setState({\n          globalTempConvert: false,\n          tempConvert: false,\n          temperature: celcius, \n          feelsLikeTemp: feelslike\n        }, () => \n        {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      }\n    }\n  };\n  // global change to fahrenheit\n  globalChangeToFahr () {\n    if(this.state.globalTempConvert === false) {\n      this.setState({\n        globalTempConvert: true\n      }, () => \n      {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      this.state.weatherCards.map(item => {\n        item[1] = Math.round((item[1] * 1.8) + 32)\n      })\n      if(this.state.tempConvert !== true) {\n        let fahrenheit = Math.round((this.state.temperature * 1.8) + 32);\n        let feelslike = Math.round((this.state.feelsLikeTemp * 1.8) + 32);\n        this.setState({\n          globalTempConvert: true,\n          temperature: fahrenheit, \n          tempConvert: true,\n          feelsLikeTemp: feelslike\n        }, () => \n        {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n      }\n    }\n  };\n  // drag and drop cards \n  handleOnDragEnd (result) {\n    if (!result.destination) return;\n    const items = Array.from(this.state.weatherCards);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    this.setState ({\n      weatherCards: items\n    }, () => {localStorage.setItem(\"card\", JSON.stringify(this.state))})\n  };\n\n  render () {\n    return (\n      <div className='app'>\n          <Header \n            globalTempConvert={this.state.globalTempConvert}\n            globalChangeTempCels={this.globalChangeToCels}\n            globalChangeTempFahr={this.globalChangeToFahr}\n            cityItemClick={this.cityItemClick}\n            enterClick={this.fetchDataEnter} \n            showWeather={this.fetchData}\n          />\n          <div className='weather-info'>\n            <List\n              handleOnDragEnd={this.handleOnDragEnd}\n              deleteCard={this.deleteCards} \n              moreInfo={this.moreInfoRequest} \n              cards={this.state.weatherCards}\n              updateCard={this.updateCards}\n              getTimeUpdate={this.getUpdateTime}\n            />\n            <Display \n              cards={this.state.weatherCards}\n              tempConvert={this.state.tempConvert}\n              convertToCels={this.convertToCels}\n              convertToFahr={this.convertToFahr}\n              updateDisplayCard={this.updateDisplay}\n              loaded={this.state.isLoaded} \n              error={this.state.error} \n              cityName={this.state.city} \n              currentTime={this.state.time} \n              currentDate={this.state.date} \n              weatherDesc={this.state.description} \n              iconLink={this.state.icon} \n              temperature={this.state.temperature} \n              feelsLikeTemp={this.state.feelsLikeTemp} \n              humidity={this.state.humidity} \n              windSpeed={this.state.wind}\n            />\n          </div>\n          <Footer/>\n      </div>\n    )\n  };\n};\nexport default App;\nlet intervalTime = '';\nlet interval = '';\n\n","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/reportWebVitals.js",[],"/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/Header.jsx",["50","51","52"],"import React, { useState, useCallback } from \"react\";\nimport debounce from \"lodash.debounce\";\nimport \"./styles/Header.css\";\nlet searchValue = \"\";\nfunction Header (props) {\n    const [citylist, changeList] = useState(\"\")\n    const debouncedSave = useCallback(\n        debounce(() => {\n        if(searchValue !== \"\") {\n           fetch(\"https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json\")\n           .then(response => {\n                if (response.ok) {\n                return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then((data) => {\n                let citiesData = data;\n                let filteredCities = citiesData.filter(item => {\n                    let regex = new RegExp(`^${searchValue}`, \"gi\")\n                    return item.name.match(regex);\n                })\n                changeList(filteredCities)\n            })\n        }\n        else {\n            changeList(\"\")\n        }}, 250)\n    \n    );\n    \n    const handleKeyUp = (e) => {\n        searchValue = e.target.value;\n        let searchbox = document.getElementById(\"search-list\");\n        if(e.target.value !== \"\") {\n            searchbox.classList.remove(\"cities-list-before\");\n            searchbox.classList.add(\"cities-list-after\");\n        }\n        else {\n            searchbox.classList.remove(\"cities-list-after\");\n            searchbox.classList.add(\"cities-list-before\");\n        }\n            debouncedSave();\n    };\n\n        \n    const inputBlur = (e) => {\n        let searchbox = document.getElementById(\"search-list\");\n        if (!e.relatedTarget) {\n            searchbox.classList.remove(\"cities-list-after\");\n            searchbox.classList.add(\"cities-list-before\");\n        }\n        else if(e.relatedTarget && e.relatedTarget.id === \"search-list\" || e.relatedTarget.className === \"search-item\") {\n            e.preventDefault();\n        }\n        else {\n            searchbox.classList.remove(\"cities-list-after\");\n            searchbox.classList.add(\"cities-list-before\");\n        }\n    }\n        return (\n            <header className={\"header\"}>\n                <h1 className=\"page-name\">MyWeather</h1>\n                <div  className=\"header-main\">\n                    <div className=\"search-block\">\n                        <input onBlur={inputBlur} onKeyUp={handleKeyUp} onKeyDown={props.enterClick} \n                        placeholder=\"Enter city\" className=\"search-input\"></input>\n                        <div tabIndex=\"1\" id=\"search-list\" className=\"cities-list-before\">\n                       {citylist !== \"\" ? citylist.map((item, index) => {\n                           return (\n                               <li tabIndex=\"1\" onClick={() => {props.cityItemClick(item.name)}} key={index} className=\"search-item\">{item.name} ({item.country })</li>\n                           )\n                       }) : \"\"}\n                        </div>\n                    </div>\n                    <button onClick={props.showWeather} className=\"search-btn\">Show weather</button>\n                </div>\n                <div className=\"page-settings\">\n                    <div className=\"cels-fahr-selector\">\n                        <div onClick={props.globalChangeTempCels} className={props.globalTempConvert === false ? \"cels-block\" : \"cels-block-after\"}><span className=\"temp-item\"><sup>o</sup>C</span></div>\n                        <div onClick={props.globalChangeTempFahr} className={props.globalTempConvert === true ? \"fahr-block\" : \"fahr-block-after\"}><span className=\"temp-item\"><sup>o</sup>F</span></div>\n                    </div>\n                </div>\n            </header>\n        )\n};\nexport default Header;\n","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/Display.jsx",["53"],"import React from 'react';\nimport './styles/Display.css';\nclass Display extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render () {\n        return (\n            <div className={this.props.cards.length > 0 ? 'display' : \"display-none\"}>\n                <div className={this.props.loaded === true ? 'display-before' : 'display-after'}>\n                    <p className='starting-message'>{this.props.error ? 'Please enter correct city name': 'Please enter a city name'}</p> \n                </div>\n                <div className=\"display-wrapper\">\n                    <div className='upd-btn-wrapper'>\n                        <button onClick={this.props.updateDisplayCard} className='update-btn'><i className=\"fas fa-sync-alt\"></i></button>\n                    </div>\n                    <div className='display-main'>\n                        <div className='main'>\n                            <p className='city-name'>{this.props.cityName}</p>\n                            <p className='current-date'>{this.props.currentDate}</p>\n                            <p className='current-time'>{this.props.currentTime}</p>\n                            <p className='weather-desc'>{this.props.weatherDesc}</p>\n                            <img alt='weather icon' className='weather-icon' src={this.props.iconLink}></img>\n                        </div>\n                        <div className='main-temp'>\n                            <div className='temp-block'>\n                                <div className=\"temperature-switch\">\n                                    <button onClick={this.props.convertToCels} className={this.props.tempConvert === false ? 'celcius-switcher' : 'celcius-switcher-after'}><sup>o</sup>C</button>\n                                    <button onClick={this.props.convertToFahr} className={this.props.tempConvert === true ? 'fahrenheit-switcher' : 'fahrenheit-switcher-after'}><sup>o</sup>F</button>\n                                </div>\n                                <span className='temp'>{this.props.temperature}<sup>o</sup></span>\n                                <p className='feelslike-temp-wrapper'>Feels like: \n                                    <span className='feelslike_temp'> {this.props.feelsLikeTemp}<sup>o</sup></span>\n                                </p>\n                            </div>\n                            <div className='temp-block-more'>\n                                <p className='humidity'>Humidity: {this.props.humidity}</p>\n                                <p className='wind-speed'>Wind: {this.props.windSpeed}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};\nexport default Display;\n","/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/List.jsx",[],"/Users/matvey/Documents/Projects/JavaScript/Portfolio-projects/React/weather-app-react/src/components/Footer.jsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":101,"column":44,"nodeType":"60","messageId":"61","endLine":101,"endColumn":46},{"ruleId":"62","severity":1,"message":"63","line":116,"column":70,"nodeType":"64","messageId":"65","endLine":116,"endColumn":71},{"ruleId":"62","severity":1,"message":"63","line":162,"column":70,"nodeType":"64","messageId":"65","endLine":162,"endColumn":71},{"ruleId":"62","severity":1,"message":"63","line":172,"column":80,"nodeType":"64","messageId":"65","endLine":172,"endColumn":81},{"ruleId":"62","severity":1,"message":"63","line":244,"column":70,"nodeType":"64","messageId":"65","endLine":244,"endColumn":71},{"ruleId":"58","severity":1,"message":"59","line":246,"column":48,"nodeType":"60","messageId":"61","endLine":246,"endColumn":50},{"ruleId":"62","severity":1,"message":"63","line":265,"column":80,"nodeType":"64","messageId":"65","endLine":265,"endColumn":81},{"ruleId":"58","severity":1,"message":"59","line":319,"column":40,"nodeType":"60","messageId":"61","endLine":319,"endColumn":42},{"ruleId":"58","severity":1,"message":"59","line":336,"column":44,"nodeType":"60","messageId":"61","endLine":336,"endColumn":46},{"ruleId":"62","severity":1,"message":"63","line":393,"column":70,"nodeType":"64","messageId":"65","endLine":393,"endColumn":71},{"ruleId":"58","severity":1,"message":"59","line":395,"column":48,"nodeType":"60","messageId":"61","endLine":395,"endColumn":50},{"ruleId":"62","severity":1,"message":"63","line":414,"column":80,"nodeType":"64","messageId":"65","endLine":414,"endColumn":81},{"ruleId":"58","severity":1,"message":"59","line":491,"column":40,"nodeType":"60","messageId":"61","endLine":491,"endColumn":42},{"ruleId":"58","severity":1,"message":"59","line":518,"column":40,"nodeType":"60","messageId":"61","endLine":518,"endColumn":42},{"ruleId":"66","severity":1,"message":"67","line":7,"column":27,"nodeType":"68","endLine":7,"endColumn":38},{"ruleId":"69","severity":1,"message":"70","line":54,"column":33,"nodeType":"71","messageId":"72","endLine":54,"endColumn":35},{"ruleId":"69","severity":1,"message":"70","line":54,"column":73,"nodeType":"71","messageId":"72","endLine":54,"endColumn":75},{"ruleId":"73","severity":1,"message":"74","line":4,"column":5,"nodeType":"75","messageId":"76","endLine":6,"endColumn":6},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]